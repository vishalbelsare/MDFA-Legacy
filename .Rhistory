gamma_cf_L_T<-x_cf_L_T$fmatrix[,1]
# Here we set root=F
x_cf_L_F<-mFilter(as.ts(1:L),filter="CF",pu=len2,pl=len1,root=F,drift=F, nfix=NULL,theta=1)
gamma_cf_L_F<-x_cf_L_F$fmatrix[,1]
rm(list=ls())
library(xts)
# State-space models (will be replicated by MDFA)
library(dlm)
# Numerical package
library(numDeriv)
# Graphical package for recession-shading (empirical examples based on US-GDP)
library(tis)
#install.packages("devtools")
library(devtools)
# Load MDFA package from github
devtools::install_github("wiaidp/MDFA")
# MDFA package
library(MDFA)
library(RCurl)    # For getURL() and curl handler / cookie / google login
library(stringr)  # For str_trim() to trip whitespace from strings
library(Quandl)
require (Quandl)
#Quandl.api_key("ivVdJGV57TXA1RX5jgvp")
path.main<-paste(getwd(),"/Sweave/",sep="")
path.pgm<-paste(path.main,"Rnw/",sep="")
path.out<-paste(path.main,"Latex/",sep="")
script <- paste(path.pgm,"MDFA_Legacy",sep="")
## enforce par(ask=FALSE)
options(device.ask.default=FALSE)
## create a LaTeX file
Sweave(script,output=paste(path.out,"MDFA_Legacy.tex",sep=""))
# The following piece of code is useful when extracting the R-code
rm(list=ls())
library(xts)
# State-space models (will be replicated by MDFA)
library(dlm)
# Numerical package
library(numDeriv)
# Graphical package for recession-shading (empirical examples based on US-GDP)
library(tis)
#install.packages("devtools")
library(devtools)
# Load MDFA package from github
devtools::install_github("wiaidp/MDFA")
# MDFA package
library(MDFA)
library(RCurl)    # For getURL() and curl handler / cookie / google login
library(stringr)  # For str_trim() to trip whitespace from strings
library(Quandl)
require (Quandl)
#Quandl.api_key("ivVdJGV57TXA1RX5jgvp")
path.main<-paste(getwd(),"/Sweave/",sep="")
path.pgm<-paste(path.main,"Rnw/",sep="")
path.out<-paste(path.main,"Latex/",sep="")
script <- paste(path.pgm,"MDFA_Legacy",sep="")
## enforce par(ask=FALSE)
options(device.ask.default=FALSE)
## create a LaTeX file
Sweave(script,output=paste(path.out,"MDFA_Legacy.tex",sep=""))
# The following piece of code is useful when extracting the R-code
mdfa_mso_cust<-function(L,DFTs,Gamma,lambda,eta,cutoff){
K<-dim(DFTs)[1]-1
m<-dim(DFTs)[2]
omega_Gamma<-as.integer(cutoff*K/pi)
weight_h=DFTs[,1]
zwei=rep(1,K+1)
zwei[1]=sqrt(0.5)
zwei=rep(2,K+1)
zwei[1]=2
if ((K-omega_Gamma+1)>0){weight_h<-(c(rep(1,omega_Gamma),(1:(K-omega_Gamma+1))^(eta)))}
Y<-zwei*Gamma*DFTs[,1]*sqrt(weight_h)
X=NULL
for(p in 1:m){
for (l in 1:L)
{
X<-cbind(X,zwei*DFTs[,p]*(cos(-1*(l-1)*pi*(0:K)/K)+sqrt(1+Gamma*lambda)*1.i*sin(-1*(l-1)*pi*(0:K)/K))*sqrt(weight_h))
}
}
XH<-t(Conj(X)); RXHX<-Re(XH%*%X); RXHY<-Re(XH%*%Y)
b=as.vector(solve(RXHX)%*%RXHY)
bmat=matrix(b,L,m)
return(bmat)
}
K<-100
L<-2
set.seed(1)
weight_func<-cbind(rep(1,K),rep(1,K),rnorm(K))
DFTs<-as.matrix(weight_func[,2:ncol(weight_func)])
Lag<-0
cutoff<-pi/6
Gamma<-(1:K)<(K/(pi/cutoff))
lambda<-0
eta<-1
MDFA_cust(L, weight_func, Lag, Gamma, cutoff, lambda, eta)$mdfa_obj$b
mdfa_mso_cust(L,DFTs,Gamma,lambda,eta,cutoff)
len=12
len2=as.integer(len/2)
cutoffInDays=len/4
cutoff=2*pi/(cutoffInDays)
Gamma=((0:len2)*pi/len2)<cutoff
L=3
insample<-nrow(datam)
weight_func<-spec_comp(insample, datam, 0)$weight_func
data=matrix(0,len,2)
data[,1]=datam[1:len,1]
data[,2]=datam[1:len,3]
DFTs=dfts(data)
#save(datam,file="mdfa.Rdata")
mdfa_cust<-MDFA_cust(L,weight_func,0,Gamma,cutoff,1,0)$mdfa_obj
print(mdfa_cust$b)
bbb=mdfa_mso_cust(L,DFTs,Gamma,1,0,cutoff)
print(bbb)
len=12
len2=as.integer(len/2)
cutoffInDays=len/4
cutoff=2*pi/(cutoffInDays)
Gamma=((0:len2)*pi/len2)<cutoff
L=3
insample<-nrow(datam)
weight_func<-spec_comp(insample, datam, 0)$weight_func
load(file="mdfa.Rdata")
K<-100
L<-2
set.seed(1)
weight_func<-cbind(rep(1,K),rep(1,K),rnorm(K))
DFTs<-as.matrix(weight_func[,2:ncol(weight_func)])
Lag<-0
cutoff<-pi/6
Gamma<-(1:K)<(K/(pi/cutoff))
lambda<-0
eta<-0
MDFA_cust(L, weight_func, Lag, Gamma, cutoff, lambda, eta)$mdfa_obj$b
mdfa_mso_cust(L,DFTs,Gamma,lambda,eta,cutoff)
mdfa_mso_cust<-function(L,DFTs,Gamma,lambda,eta,cutoff){
K<-dim(DFTs)[1]-1
m<-dim(DFTs)[2]
omega_Gamma<-as.integer(cutoff*K/pi)
weight_h=DFTs[,1]
zwei=rep(1,K+1)
zwei[1]=sqrt(0.5)
zwei=rep(2,K+1)
zwei[1]=1
if ((K-omega_Gamma+1)>0){weight_h<-(c(rep(1,omega_Gamma),(1:(K-omega_Gamma+1))^(eta)))}
Y<-zwei*Gamma*DFTs[,1]*sqrt(weight_h)
X=NULL
for(p in 1:m){
for (l in 1:L)
{
X<-cbind(X,zwei*DFTs[,p]*(cos(-1*(l-1)*pi*(0:K)/K)+sqrt(1+Gamma*lambda)*1.i*sin(-1*(l-1)*pi*(0:K)/K))*sqrt(weight_h))
}
}
XH<-t(Conj(X)); RXHX<-Re(XH%*%X); RXHY<-Re(XH%*%Y)
b=as.vector(solve(RXHX)%*%RXHY)
bmat=matrix(b,L,m)
return(bmat)
}
K<-100
L<-2
set.seed(1)
weight_func<-cbind(rep(1,K),rep(1,K),rnorm(K))
DFTs<-as.matrix(weight_func[,2:ncol(weight_func)])
Lag<-0
cutoff<-pi/6
Gamma<-(1:K)<(K/(pi/cutoff))
lambda<-0
eta<-0
MDFA_cust(L, weight_func, Lag, Gamma, cutoff, lambda, eta)$mdfa_obj$b
mdfa_mso_cust(L,DFTs,Gamma,lambda,eta,cutoff)
eta
rm(list=ls())
library(xts)
# State-space models (will be replicated by MDFA)
library(dlm)
# Numerical package
library(numDeriv)
# Graphical package for recession-shading (empirical examples based on US-GDP)
library(tis)
#install.packages("devtools")
library(devtools)
# Load MDFA package from github
devtools::install_github("wiaidp/MDFA")
# MDFA package
library(MDFA)
library(RCurl)    # For getURL() and curl handler / cookie / google login
library(stringr)  # For str_trim() to trip whitespace from strings
library(Quandl)
require (Quandl)
#Quandl.api_key("ivVdJGV57TXA1RX5jgvp")
path.main<-paste(getwd(),"/Sweave/",sep="")
path.pgm<-paste(path.main,"Rnw/",sep="")
path.out<-paste(path.main,"Latex/",sep="")
script <- paste(path.pgm,"MDFA_Legacy",sep="")
## enforce par(ask=FALSE)
options(device.ask.default=FALSE)
## create a LaTeX file
Sweave(script,output=paste(path.out,"MDFA_Legacy.tex",sep=""))
# The following piece of code is useful when extracting the R-code
lenh<-2000
len<-120
# Specify the AR-coefficients
a_vec<-c(0.9,0.1,-0.9)
xh<-matrix(nrow=lenh,ncol=length(a_vec))
x<-matrix(nrow=len,ncol=length(a_vec))
yhat<-x
y<-x
# Generate series for each AR(1)-process
for (i in 1:length(a_vec))
{
# We want the same random-seed for each process
set.seed(10)
xh[,i]<-arima.sim(list(ar=a_vec[i]),n=lenh)
}
x<-xh[lenh/2+(-len/2):((len/2)-1),]
# Compute the coefficients of the symmetric target filter
cutoff<-pi/6
# Order of approximation
ord<-1000
# Filter weights ideal trend (See DFA)
gamma<-c(cutoff/pi,(1/pi)*sin(cutoff*1:ord)/(1:ord))
# Compute the outputs yt of the (truncated) symmetric target filter
for (i in 1:length(a_vec))
{
for (j in 1:120)
{
y[j,i]<-gamma[1:900]%*%xh[lenh/2+(-len/2)-1+(j:(j-899)),i]+
gamma[2:900]%*%xh[lenh/2+(-len/2)+(j:(j+898)),i]
}
}
plot_T<-F
periodogram<-matrix(ncol=3,nrow=len/2+1)
trffkt<-periodogram
perf_mat<-matrix(nrow=3,ncol=2)
dimnames(perf_mat)[[2]]<-c("Criterion Value",
"Mean-Square Sample Filter Error")
dimnames(perf_mat)[[1]]<-c("a1=0.9","a1=0.1","a1=-0.9")
# Filter length
L<-12
# Real-time design
Lag<-0
# Target ideal trend
Gamma<-c(1,(1:(len/2))<len/12)
b<-matrix(nrow=L,ncol=3)
# Compute real-time filters
for (i in 1:3)#i<-1
{
# Compute the periodogram based on the data (length 120)
periodogram[,i]<-per(x[,i],plot_T)$per
# Optimize filters
filt<-dfa_ms(L,periodogram[,i],Lag,Gamma)
trffkt[,i]<-filt$trffkt
b[,i]<-filt$b
# Compute real-time outputs (we can use the longer series in order
# to obtain estimates for time points t=1,...,11)
for (j in 1:len)
yhat[j,i]<-filt$b%*%xh[lenh/2+(-len/2)-1+j:(j-L+1),i]
}
library(dlm)
# Numerical package
library(numDeriv)
# Graphical package for recession-shading (empirical examples based on US-GDP)
library(tis)
#install.packages("devtools")
library(devtools)
# Load MDFA package from github
devtools::install_github("wiaidp/MDFA")
# MDFA package
library(MDFA)
library(RCurl)    # For getURL() and curl handler / cookie / google login
library(stringr)  # For str_trim() to trip whitespace from strings
library(Quandl)
require (Quandl)
plot_T<-F
periodogram<-matrix(ncol=3,nrow=len/2+1)
trffkt<-periodogram
perf_mat<-matrix(nrow=3,ncol=2)
dimnames(perf_mat)[[2]]<-c("Criterion Value",
"Mean-Square Sample Filter Error")
dimnames(perf_mat)[[1]]<-c("a1=0.9","a1=0.1","a1=-0.9")
# Filter length
L<-12
# Real-time design
Lag<-0
# Target ideal trend
Gamma<-c(1,(1:(len/2))<len/12)
b<-matrix(nrow=L,ncol=3)
# Compute real-time filters
for (i in 1:3)#i<-1
{
# Compute the periodogram based on the data (length 120)
periodogram[,i]<-per(x[,i],plot_T)$per
# Optimize filters
filt<-dfa_ms(L,periodogram[,i],Lag,Gamma)
trffkt[,i]<-filt$trffkt
b[,i]<-filt$b
# Compute real-time outputs (we can use the longer series in order
# to obtain estimates for time points t=1,...,11)
for (j in 1:len)
yhat[j,i]<-filt$b%*%xh[lenh/2+(-len/2)-1+j:(j-L+1),i]
}
mse<-apply(na.exclude((yhat-y))^2,2,mean)
perf_mat[,2]<-mse
round(perf_mat[,2],3)
set.seed(12)
# Select the AR(1)-process with coefficient 0.9
i_process<-1
# Scaling of the idiosyncratic noise
scale_idiosyncratic<-0.1
eps<-rnorm(nrow(xh))
indicator<-xh[,i_process]+scale_idiosyncratic*eps
# Data: first column=target, second column=x,
#   third column=shifted (leading) indicator
data_matrix<-cbind(xh[,i_process],xh[,i_process],c(indicator[2:nrow(xh)],NA))
dimnames(data_matrix)[[2]]<-c("target","x","leading indicator")
# Extract 120 observations from the long sample
data_matrix_120<-data_matrix[lenh/2+(-len/2):((len/2)-1),]
head(round(data_matrix_120,4))
insample<-nrow(data_matrix_120)
# d=0 for stationary series: see default settings
weight_func<-spec_comp(insample, data_matrix_120, d)$weight_func
source(file=paste(path.pgm,"control_default.r",sep=""))
mdfa_obj<-MDFA_mse(L,weight_func,Lag,Gamma)$mdfa_obj
# Filter coefficients
b_mat<-mdfa_obj$b
dimnames(b_mat)[[2]]<-c("x","leading indicator")
dimnames(b_mat)[[1]]<-paste("Lag ",0:(L-1),sep="")#dim(b_mat)
head(b_mat)
Gamma
Lag
weight_func
d
insample
data_matrix_120
weight_func<-spec_comp(insample, data_matrix_120, d)$weight_func
weight_func
spec_comp
periodogram_bp
spec_comp
spec_comp(insample, data_matrix_120, d)
periodogram_bp
periodogram_bp
rm(list=ls())
library(xts)
# State-space models (will be replicated by MDFA)
library(dlm)
# Numerical package
library(numDeriv)
# Graphical package for recession-shading (empirical examples based on US-GDP)
library(tis)
#install.packages("devtools")
library(devtools)
# Load MDFA package from github
devtools::install_github("wiaidp/MDFA")
rm(list=ls())
library(xts)
# State-space models (will be replicated by MDFA)
library(dlm)
# Numerical package
library(numDeriv)
# Graphical package for recession-shading (empirical examples based on US-GDP)
library(tis)
#install.packages("devtools")
library(devtools)
# Load MDFA package from github
devtools::install_github("wiaidp/MDFA")
# MDFA package
library(MDFA)
library(RCurl)    # For getURL() and curl handler / cookie / google login
library(stringr)  # For str_trim() to trip whitespace from strings
library(Quandl)
require (Quandl)
#Quandl.api_key("ivVdJGV57TXA1RX5jgvp")
path.main<-paste(getwd(),"/Sweave/",sep="")
path.pgm<-paste(path.main,"Rnw/",sep="")
path.out<-paste(path.main,"Latex/",sep="")
script <- paste(path.pgm,"MDFA_Legacy",sep="")
## enforce par(ask=FALSE)
options(device.ask.default=FALSE)
Sweave(script,output=paste(path.out,"MDFA_Legacy.tex",sep=""))
set.seed(12)
# Select the AR(1)-process with coefficient 0.9
i_process<-1
# Scaling of the idiosyncratic noise
scale_idiosyncratic<-0.1
eps<-rnorm(nrow(xh))
indicator<-xh[,i_process]+scale_idiosyncratic*eps
# Data: first column=target, second column=x,
#   third column=shifted (leading) indicator
data_matrix<-cbind(xh[,i_process],xh[,i_process],c(indicator[2:nrow(xh)],NA))
dimnames(data_matrix)[[2]]<-c("target","x","leading indicator")
# Extract 120 observations from the long sample
data_matrix_120<-data_matrix[lenh/2+(-len/2):((len/2)-1),]
head(round(data_matrix_120,4))
insample<-nrow(data_matrix_120)
# d=0 for stationary series: see default settings
weight_func<-spec_comp(insample, data_matrix_120, d)$weight_func
source(file=paste(path.pgm,"control_default.r",sep=""))
# Estimate filter coefficients
mdfa_obj<-MDFA_mse(L,weight_func,Lag,Gamma)$mdfa_obj
# Filter coefficients
b_mat<-mdfa_obj$b
dimnames(b_mat)[[2]]<-c("x","leading indicator")
dimnames(b_mat)[[1]]<-paste("Lag ",0:(L-1),sep="")#dim(b_mat)
head(b_mat)
i_process<-1
# Define the data-matrix:
# The first column must be the target series.
# Columns 2,3,... are the explanatory series. In a univariate setting
# target and explanatory variable are identical
data_matrix<-cbind(x[,i_process],x[,i_process])
# Determine the in-sample period (fully in sample)
insample<-nrow(data_matrix)
# Compute the DFT by relying on the multivariate DFT-function:
#   d=0 for stationary data (default settings)
weight_func<-spec_comp(insample, data_matrix, d)$weight_func
source(file=paste(path.pgm,"control_default.r",sep=""))
# Estimate filter coefficients:
mdfa_obj<-mdfa_analytic(L, lambda, weight_func, Lag, Gamma, eta, cutoff, i1,i2, weight_constraint, lambda_cross, lambda_decay, lambda_smooth,lin_eta, shift_constraint, grand_mean, b0_H0, c_eta, weight_structure,white_noise, synchronicity, lag_mat, troikaner)
# Filter coefficients: compare MDFA and previous DFA
b_mat<-cbind(mdfa_obj$b,b[,i_process])
dimnames(b_mat)[[2]]<-c("MDFA","DFA")
dimnames(b_mat)[[1]]<-paste("lag ",0:(L-1),sep="")
as.matrix(round(b_mat,5))
@
The MDFA replicates DFA, as desired. Note that we could refer to the context-specific $MDFA\textunderscore mse$ function
<<exercise_dfa_ms_4,echo=True>>=
mdfa_obj_mse<-MDFA_mse(L,weight_func,Lag,Gamma)$mdfa_obj
@
which abbreviates the lengthy list of arguments of the generic $mdfa\textunderscore analytic$-call to those required in a MSE-framework. As can be seen, estimated coefficients are identical:
<<exercise_dfa_ms_4,echo=True>>=
b_mat<-cbind(b_mat,mdfa_obj_mse$b)
dimnames(b_mat)[[2]][3]<-"MDFA_mse"
dimnames(b_mat)[[1]]<-paste("lag ",0:(L-1),sep="")
head(as.matrix(round(b_mat,5)))
per
library(xts)
# State-space models (will be replicated by MDFA)
library(dlm)
# Numerical package
library(numDeriv)
# Graphical package for recession-shading (empirical examples based on US-GDP)
library(tis)
#install.packages("devtools")
library(devtools)
devtools::install_github("wiaidp/MDFA")
devtools::install_github("wiaidp/MDFA")
rm(list=ls())
library(xts)
# State-space models (will be replicated by MDFA)
library(dlm)
# Numerical package
library(numDeriv)
# Graphical package for recession-shading (empirical examples based on US-GDP)
library(tis)
#install.packages("devtools")
library(devtools)
# Load MDFA package from github
devtools::install_github("wiaidp/MDFA")
# MDFA package
library(MDFA)
library(RCurl)    # For getURL() and curl handler / cookie / google login
library(stringr)  # For str_trim() to trip whitespace from strings
library(Quandl)
require (Quandl)
#Quandl.api_key("ivVdJGV57TXA1RX5jgvp")
path.main<-paste(getwd(),"/Sweave/",sep="")
path.pgm<-paste(path.main,"Rnw/",sep="")
path.out<-paste(path.main,"Latex/",sep="")
script <- paste(path.pgm,"MDFA_Legacy",sep="")
## enforce par(ask=FALSE)
options(device.ask.default=FALSE)
## create a LaTeX file
Sweave(script,output=paste(path.out,"MDFA_Legacy.tex",sep=""))
# The following piece of code is useful when extracting the R-code
script_e <- paste(path.main,"Rnw/MDFA_Legacy.Rnw",sep="")
## create an R source file from the code chunks
# The newly generated file MDFA_Legay.r will be written to wia_desktop\\Projekte\\2014\\MDFA-Legacy\\
Stangle(script_e)
script_e <- paste(path.main,"Rnw/MDFA_Legacy.Rnw",sep="")
Stangle(script_e)
Stangle(script_e)
rm(list=ls())
library(xts)
# State-space models (will be replicated by MDFA)
library(dlm)
# Numerical package
library(numDeriv)
# Graphical package for recession-shading (empirical examples based on US-GDP)
library(tis)
#install.packages("devtools")
library(devtools)
# Load MDFA package from github
devtools::install_github("wiaidp/MDFA")
# MDFA package
library(MDFA)
library(RCurl)    # For getURL() and curl handler / cookie / google login
library(stringr)  # For str_trim() to trip whitespace from strings
library(Quandl)
require (Quandl)
#Quandl.api_key("ivVdJGV57TXA1RX5jgvp")
path.main<-paste(getwd(),"/Sweave/",sep="")
path.pgm<-paste(path.main,"Rnw/",sep="")
path.out<-paste(path.main,"Latex/",sep="")
script <- paste(path.pgm,"MDFA_Legacy",sep="")
## enforce par(ask=FALSE)
options(device.ask.default=FALSE)
## create a LaTeX file
Sweave(script,output=paste(path.out,"MDFA_Legacy.tex",sep=""))
# The following piece of code is useful when extracting the R-code
script_e <- paste(path.main,"Rnw/MDFA_Legacy.Rnw",sep="")
## create an R source file from the code chunks
# The newly generated file MDFA_Legay.r will be written to wia_desktop\\Projekte\\2014\\MDFA-Legacy\\
Stangle(script_e)
