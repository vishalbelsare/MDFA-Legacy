T <- 2500
N <- 3
phi.matrix <- rbind(c(.9,0,0),c(0,.1,0),c(0,0,-.9))
innovar.matrix <- diag(N)
true.psi <- var.par2pre(array(phi.matrix,c(2,2,1)))
gamma <- VARMAauto(array(phi.matrix,c(2,2,1)),NULL,innovar.matrix,10)
gamma.0 <- gamma[,,1]
true.psi <- var.par2pre(array(phi.matrix,c(N,N,1)))
true.psi
gamma <- VARMAauto(array(phi.matrix,c(2,2,1)),NULL,innovar.matrix,10)
gamma <- VARMAauto(array(phi.matrix,c(N,N,1)),NULL,innovar.matrix,10)
gamma.0 <- gamma[,,1]
x.init <- t(chol(gamma.0)) %*% rnorm(N)
x.next <- x.init
x.sim <- NULL
for(t in 1:T)
{
x.next <- phi.matrix %*% x.next + rnorm(N)
x.sim <- cbind(x.sim,x.next)
}
x.sim <- ts(t(x.sim))
x.acf <- acf(x.sim,type="covariance",plot=FALSE,lag.max=T)[[1]]
x.acf <- aperm(aperm(x.acf,c(3,2,1)),c(2,1,3))
# construct and apply low pass filter
mu <- pi/6
len <- 1000
lp.filter <- c(mu/pi,sin(seq(1,len)*mu)/(pi*seq(1,len)))
lp.filter <- c(rev(lp.filter),lp.filter[-1])
x.trend.ideal <- filter(x.sim,lp.filter,method="convolution",sides=2)[(len+1):(T-len),]
# get MDFA concurrent filter
q <- 20
Grid <- T
m <- floor(Grid/2)
# The Fourier frequencies
freq.ft <- 2*pi*Grid^{-1}*(seq(1,Grid) - (m+1))
# frf for ideal low-pass
frf.psi <- rep(0,Grid)
frf.psi[abs(freq.ft) <= mu] <- 1
frf.psi <- matrix(frf.psi,nrow=1) %x% diag(N)
frf.psi <- array(frf.psi,c(N,N,Grid))
spec.hat <- mdfa.pergram(x.sim)
spec.hat <- mdfa.pergram(x.sim,1)
lp.mdfa <- mdfa.unconstrained(frf.psi,spec.hat,q)
# apply the MDFA concurrent filter
x.trend.mdfa11 <- filter(x.sim[,1],lp.mdfa[[1]][1,1,],method="convolution",sides=1)
x.trend.mdfa12 <- filter(x.sim[,2],lp.mdfa[[1]][1,2,],method="convolution",sides=1)
x.trend.mdfa13 <- filter(x.sim[,3],lp.mdfa[[1]][1,3,],method="convolution",sides=1)
x.trend.mdfa21 <- filter(x.sim[,1],lp.mdfa[[1]][2,1,],method="convolution",sides=1)
x.trend.mdfa22 <- filter(x.sim[,2],lp.mdfa[[1]][2,2,],method="convolution",sides=1)
x.trend.mdfa23 <- filter(x.sim[,3],lp.mdfa[[1]][2,3,],method="convolution",sides=1)
x.trend.mdfa31 <- filter(x.sim[,1],lp.mdfa[[1]][3,1,],method="convolution",sides=1)
x.trend.mdfa32 <- filter(x.sim[,2],lp.mdfa[[1]][3,2,],method="convolution",sides=1)
x.trend.mdfa33 <- filter(x.sim[,3],lp.mdfa[[1]][3,3,],method="convolution",sides=1)
x.trend.mdfa <- cbind(x.trend.mdfa11 + x.trend.mdfa12 + x.trend.mdfa13,
x.trend.mdfa21 + x.trend.mdfa22 + x.trend.mdfa23,
x.trend.mdfa31 + x.trend.mdfa32 + x.trend.mdfa33)
x.trend.mdfa <- x.trend.mdfa[(len+1):(T-len),]
# visualize
file = paste("mdfa_trivar1_filtering.pdf", sep = "")
par(oma=c(2,0,0,0),mar=c(2,4,2,2)+0.1,mfrow=c(3,1),cex.lab=.8)
plot(ts(x.trend.ideal[,1]),ylab="",xlab="",yaxt="n",xaxt="n")
axis(1,cex.axis=.5)
axis(2,cex.axis=.5)
lines(x.trend.mdfa[,1],col=2)
plot(ts(x.trend.ideal[,2]),ylab="",xlab="",yaxt="n",xaxt="n")
axis(1,cex.axis=.5)
axis(2,cex.axis=.5)
lines(x.trend.mdfa[,2],col=2)
plot(ts(x.trend.ideal[,3]),ylab="",xlab="",yaxt="n",xaxt="n")
axis(1,cex.axis=.5)
axis(2,cex.axis=.5)
lines(x.trend.mdfa[,3],col=2)
mtext("Time", side = 1, line = 1,outer=TRUE)
invisible(dev.off())
# compare in-sample performance
print(c(mean((x.trend.ideal[,1] - x.trend.mdfa[,1])^2),
mean((x.trend.ideal[,2] - x.trend.mdfa[,2])^2),
mean((x.trend.ideal[,3] - x.trend.mdfa[,3])^2)))
# compare to criterion value
diag(lp.mdfa[[2]])
# compute gain and phase delay functions
frf.psi <- frf.psi[1,1,]
gain.psi <- abs(frf.psi)
phased.psi <- Arg(frf.psi)/freq.ft
lp.frf <- mdfa.frf(lp.mdfa[[1]],0,T)
lp.gain1 <- abs(lp.frf[1,1,])
lp.gain2 <- abs(lp.frf[2,2,])
lp.gain3 <- abs(lp.frf[3,3,])
lp.phased1 <- -Arg(lp.frf[1,1,])/freq.ft
lp.phased2 <- -Arg(lp.frf[2,2,])/freq.ft
lp.phased3 <- -Arg(lp.frf[3,3,])/freq.ft
# visualize
file = paste("mdfa_trivar1_freqdomain.pdf", sep = "")
par(oma=c(2,0,0,0),mar=c(2,4,2,2)+0.1,mfrow=c(3,1),cex.lab=.8)
plot(ts(gain.psi,start=-1,frequency=m),col=1,ylim=c(0,1),main="Gain",
ylab="",xlab="",yaxt="n",xaxt="n")
axis(1,cex.axis=.5)
axis(2,cex.axis=.5)
lines(ts(lp.gain1,start=-1,frequency=m),col="orange")
lines(ts(lp.gain2,start=-1,frequency=m),col="green")
lines(ts(lp.gain3,start=-1,frequency=m),col="violet")
plot(ts(phased.psi,start=-1,frequency=m),col=1,
ylim=c(0,max(na.exclude(lp.phased1),na.exclude(lp.phased2),
na.exclude(lp.phased3))),main="Phase Delay",
ylab="",xlab="",yaxt="n",xaxt="n")
axis(1,cex.axis=.5)
axis(2,cex.axis=.5)
lines(ts(lp.phased1,start=-1,frequency=m),col="orange")
lines(ts(lp.phased2,start=-1,frequency=m),col="green")
lines(ts(lp.phased3,start=-1,frequency=m),col="violet")
plot(ts(rep(NA,T),start=-1,frequency=m),col=1,
ylim=c(0,max(Re(spec.hat[1,1,]),Re(spec.hat[2,2,]),Re(spec.hat[3,3,]))/6),
main="Periodogram",ylab="",xlab="",yaxt="n",xaxt="n")
axis(1,cex.axis=.5)
axis(2,cex.axis=.5)
lines(ts(Re(spec.hat[1,1,]),start=-1,frequency=m),col="orange")
lines(ts(Re(spec.hat[2,2,]),start=-1,frequency=m),col="green")
lines(ts(Re(spec.hat[3,3,]),start=-1,frequency=m),col="violet")
mtext("Cycles", side = 1, line = 1,outer=TRUE)
invisible(dev.off())
# Simulate a Gaussian bivariate process of sample size 200:
T <- 200
N <- 2
phi <- .9
sigma <- 1
gamma.0 <- 1/(1-phi^2)
x.init <- sqrt(gamma.0)*rnorm(1)
x.next <- x.init
x.sim <- x.init
for(t in 1:T)
{
x.next <- phi * x.next + rnorm(1)
x.sim <- c(x.sim,x.next)
}
w.sim <- x.sim[-1] + sigma*rnorm(T)
x.sim <- cbind(x.sim[-(T+1)],w.sim)
# MDFA
q <- 20
Grid <- T
m <- floor(Grid/2)
# The Fourier frequencies
lambda.ft <- exp(-1i*2*pi*Grid^{-1}*(seq(1,Grid) - (m+1)))
# frf for 1-step ahead forecasting
frf.psi <- matrix(lambda.ft^{-1},nrow=1) %x% diag(N)
frf.psi <- array(frf.psi,c(N,N,Grid))
spec.hat <- mdfa.pergram(x.sim,1)
fore.mdfa <- mdfa.unconstrained(frf.psi,spec.hat,q)
fore.udfa <- mdfa.unconstrained(frf.psi[1,1,,drop=FALSE],spec.hat[1,1,,drop=FALSE],q)
# apply the MDFA concurrent filter
x.fore.mdfa11 <- filter(x.sim[,1],fore.mdfa[[1]][1,1,],method="convolution",sides=1)
x.fore.mdfa12 <- filter(x.sim[,2],fore.mdfa[[1]][1,2,],method="convolution",sides=1)
x.fore.mdfa <- x.fore.mdfa11 + x.fore.mdfa12
# apply the univariate DFA concurrent filter
x.fore.udfa <- filter(x.sim[,1],fore.udfa[[1]][1,1,],method="convolution",sides=1)
# visualize
file = paste("mdfa_bimdfa-udfa.pdf", sep = "")
par(mar=c(4,4,2,2)+0.1,cex.lab=.8)
plot(ts(x.sim[-1,1]),ylab="",xlab="Time",yaxt="n",xaxt="n")
axis(1,cex.axis=.5)
axis(2,cex.axis=.5)
lines(x.fore.mdfa,col=3)
lines(x.fore.udfa,col=4)
invisible(dev.off())
# compare in-sample performance
print(c(mean((x.sim[(q+1):T,1] - x.fore.mdfa[q:(T-1)])^2),
mean((x.sim[(q+1):T,1] - x.fore.udfa[q:(T-1)])^2)))
# compare to criterion value
print(c(fore.mdfa[[2]][1,1],fore.udfa[[2]][1,1]))
# Set up loops over delta and sigma
sigma.vals <- c(0,.1,.5,1,2)
critmdfa.mat <- matrix(0,5,5)
critudfa.mat <- matrix(0,5,5)
for(delta in c(0,1,2,3,4)/4) {
for(j in 1:5) {
sigma <- sigma.vals[j]
# Simulate a Gaussian bivariate process of sample size 2500:
T <- 2500
N <- 2
phi <- .9
gamma.0 <- 1/(1-phi^2)
x.init <- sqrt(gamma.0)*rnorm(1)
x.next <- x.init
x.sim <- x.init
for(t in 1:T)
{
x.next <- phi * x.next + rnorm(1)
x.sim <- c(x.sim,x.next)
}
Grid <- T
m <- floor(Grid/2)
# define complex exponential at Fourier frequencies
lambda.ft <- exp(-1i*2*pi*Grid^{-1}*(seq(1,Grid) - (m+1)))
# frf for delta-step ahead forecasting
frf.psi <- matrix(lambda.ft^{-delta},nrow=1)
frf.psi <- array(frf.psi,c(1,1,Grid))
nowcast.filter <- mdfa.coeff(frf.psi,-len,len)
x.target <- filter(x.sim,nowcast.filter[1,1,],method="convolution",sides=2)[(len+1):(T-len)]
w.sim <- x.target + sigma*rnorm(T-2*len)
x.sim <- cbind(x.sim[(len+1):(T-len)],w.sim)
# MDFA
q <- 20
Grid <- T - 2*len
m <- floor(Grid/2)
# The Fourier frequencies (recompute with smaller sample size)
lambda.ft <- exp(-1i*2*pi*Grid^{-1}*(seq(1,Grid) - (m+1)))
# frf for delta-step ahead forecasting
frf.psi <- matrix(lambda.ft^{-delta},nrow=1) %x% diag(N)
frf.psi <- array(frf.psi,c(N,N,Grid))
spec.hat <- mdfa.pergram(x.sim)
fore.udfa <- mdfa.unconstrained(frf.psi[1,1,,drop=FALSE],spec.hat[1,1,,drop=FALSE],q)
if(j > 1) {
fore.mdfa <- mdfa.unconstrained(frf.psi,spec.hat,q)
} else {
fore.mdfa <- fore.udfa
}
# apply the MDFA concurrent filter
x.fore.mdfa11 <- filter(x.sim[,1],fore.mdfa[[1]][1,1,],method="convolution",sides=1)
if(j > 1) {
x.fore.mdfa12 <- filter(x.sim[,2],fore.mdfa[[1]][1,2,],method="convolution",sides=1)
} else { x.fore.mdfa12 <- 0*x.fore.mdfa11 }
x.fore.mdfa <- x.fore.mdfa11 + x.fore.mdfa12
# apply the univariate DFA concurrent filter
x.fore.udfa <- filter(x.sim[,1],fore.udfa[[1]][1,1,],method="convolution",sides=1)
# visualize (only in R)
par(mar=c(4,4,2,2)+0.1,cex.lab=.8)
plot(ts(x.target),ylab="",xlab="Time",yaxt="n",xaxt="n")
axis(1,cex.axis=.5)
axis(2,cex.axis=.5)
lines(x.fore.mdfa,col=3)
lines(x.fore.udfa,col=4)
# compare in-sample performance
print(c(mean((x.target[-seq(1,q-1)] - x.fore.mdfa[-seq(1,q-1)])^2),
mean((x.target[-seq(1,q-1)] - x.fore.udfa[-seq(1,q-1)])^2)))
# store criterion value
i <- delta*4 + 1
critmdfa.mat[i,j] <- fore.mdfa[[2]][1,1]
critudfa.mat[i,j] <- fore.udfa[[2]][1,1]
}}
# Set up loops over delta and sigma
sigma.vals <- c(0,.1,.5,1,2)
critmdfa.mat <- matrix(0,5,5)
critudfa.mat <- matrix(0,5,5)
j
delta
sigma <- sigma.vals[j]
# Simulate a Gaussian bivariate process of sample size 2500:
T <- 2500
N <- 2
phi <- .9
gamma.0 <- 1/(1-phi^2)
x.init <- sqrt(gamma.0)*rnorm(1)
x.next <- x.init
x.sim <- x.init
for(t in 1:T)
{
x.next <- phi * x.next + rnorm(1)
x.sim <- c(x.sim,x.next)
}
Grid <- T
m <- floor(Grid/2)
# define complex exponential at Fourier frequencies
lambda.ft <- exp(-1i*2*pi*Grid^{-1}*(seq(1,Grid) - (m+1)))
# frf for delta-step ahead forecasting
frf.psi <- matrix(lambda.ft^{-delta},nrow=1)
frf.psi <- array(frf.psi,c(1,1,Grid))
nowcast.filter <- mdfa.coeff(frf.psi,-len,len)
x.target <- filter(x.sim,nowcast.filter[1,1,],method="convolution",sides=2)[(len+1):(T-len)]
w.sim <- x.target + sigma*rnorm(T-2*len)
x.sim <- cbind(x.sim[(len+1):(T-len)],w.sim)
# MDFA
q <- 20
Grid <- T - 2*len
m <- floor(Grid/2)
# The Fourier frequencies (recompute with smaller sample size)
lambda.ft <- exp(-1i*2*pi*Grid^{-1}*(seq(1,Grid) - (m+1)))
# frf for delta-step ahead forecasting
frf.psi <- matrix(lambda.ft^{-delta},nrow=1) %x% diag(N)
frf.psi <- array(frf.psi,c(N,N,Grid))
spec.hat <- mdfa.pergram(x.sim,1)
fore.udfa <- mdfa.unconstrained(frf.psi[1,1,,drop=FALSE],spec.hat[1,1,,drop=FALSE],q)
if(j > 1) {
fore.mdfa <- mdfa.unconstrained(frf.psi,spec.hat,q)
} else {
fore.mdfa <- fore.udfa
}
# apply the MDFA concurrent filter
x.fore.mdfa11 <- filter(x.sim[,1],fore.mdfa[[1]][1,1,],method="convolution",sides=1)
if(j > 1) {
x.fore.mdfa12 <- filter(x.sim[,2],fore.mdfa[[1]][1,2,],method="convolution",sides=1)
} else { x.fore.mdfa12 <- 0*x.fore.mdfa11 }
x.fore.mdfa <- x.fore.mdfa11 + x.fore.mdfa12
# apply the univariate DFA concurrent filter
x.fore.udfa <- filter(x.sim[,1],fore.udfa[[1]][1,1,],method="convolution",sides=1)
# visualize (only in R)
par(mar=c(4,4,2,2)+0.1,cex.lab=.8)
plot(ts(x.target),ylab="",xlab="Time",yaxt="n",xaxt="n")
axis(1,cex.axis=.5)
axis(2,cex.axis=.5)
lines(x.fore.mdfa,col=3)
lines(x.fore.udfa,col=4)
# compare in-sample performance
print(c(mean((x.target[-seq(1,q-1)] - x.fore.mdfa[-seq(1,q-1)])^2),
mean((x.target[-seq(1,q-1)] - x.fore.udfa[-seq(1,q-1)])^2)))
# store criterion value
i <- delta*4 + 1
critmdfa.mat[i,j] <- fore.mdfa[[2]][1,1]
critudfa.mat[i,j] <- fore.udfa[[2]][1,1]
# Set up loops over delta and sigma
sigma.vals <- c(0,.1,.5,1,2)
critmdfa.mat <- matrix(0,5,5)
critudfa.mat <- matrix(0,5,5)
for(delta in c(0,1,2,3,4)/4) {
for(j in 1:5) {
sigma <- sigma.vals[j]
# Simulate a Gaussian bivariate process of sample size 2500:
T <- 2500
N <- 2
phi <- .9
gamma.0 <- 1/(1-phi^2)
x.init <- sqrt(gamma.0)*rnorm(1)
x.next <- x.init
x.sim <- x.init
for(t in 1:T)
{
x.next <- phi * x.next + rnorm(1)
x.sim <- c(x.sim,x.next)
}
Grid <- T
m <- floor(Grid/2)
# define complex exponential at Fourier frequencies
lambda.ft <- exp(-1i*2*pi*Grid^{-1}*(seq(1,Grid) - (m+1)))
# frf for delta-step ahead forecasting
frf.psi <- matrix(lambda.ft^{-delta},nrow=1)
frf.psi <- array(frf.psi,c(1,1,Grid))
nowcast.filter <- mdfa.coeff(frf.psi,-len,len)
x.target <- filter(x.sim,nowcast.filter[1,1,],method="convolution",sides=2)[(len+1):(T-len)]
w.sim <- x.target + sigma*rnorm(T-2*len)
x.sim <- cbind(x.sim[(len+1):(T-len)],w.sim)
# MDFA
q <- 20
Grid <- T - 2*len
m <- floor(Grid/2)
# The Fourier frequencies (recompute with smaller sample size)
lambda.ft <- exp(-1i*2*pi*Grid^{-1}*(seq(1,Grid) - (m+1)))
# frf for delta-step ahead forecasting
frf.psi <- matrix(lambda.ft^{-delta},nrow=1) %x% diag(N)
frf.psi <- array(frf.psi,c(N,N,Grid))
spec.hat <- mdfa.pergram(x.sim,1)
fore.udfa <- mdfa.unconstrained(frf.psi[1,1,,drop=FALSE],spec.hat[1,1,,drop=FALSE],q)
if(j > 1) {
fore.mdfa <- mdfa.unconstrained(frf.psi,spec.hat,q)
} else {
fore.mdfa <- fore.udfa
}
# apply the MDFA concurrent filter
x.fore.mdfa11 <- filter(x.sim[,1],fore.mdfa[[1]][1,1,],method="convolution",sides=1)
if(j > 1) {
x.fore.mdfa12 <- filter(x.sim[,2],fore.mdfa[[1]][1,2,],method="convolution",sides=1)
} else { x.fore.mdfa12 <- 0*x.fore.mdfa11 }
x.fore.mdfa <- x.fore.mdfa11 + x.fore.mdfa12
# apply the univariate DFA concurrent filter
x.fore.udfa <- filter(x.sim[,1],fore.udfa[[1]][1,1,],method="convolution",sides=1)
# visualize (only in R)
par(mar=c(4,4,2,2)+0.1,cex.lab=.8)
plot(ts(x.target),ylab="",xlab="Time",yaxt="n",xaxt="n")
axis(1,cex.axis=.5)
axis(2,cex.axis=.5)
lines(x.fore.mdfa,col=3)
lines(x.fore.udfa,col=4)
# compare in-sample performance
print(c(mean((x.target[-seq(1,q-1)] - x.fore.mdfa[-seq(1,q-1)])^2),
mean((x.target[-seq(1,q-1)] - x.fore.udfa[-seq(1,q-1)])^2)))
# store criterion value
i <- delta*4 + 1
critmdfa.mat[i,j] <- fore.mdfa[[2]][1,1]
critudfa.mat[i,j] <- fore.udfa[[2]][1,1]
}}
rm(list=ls())
library(xts)
# State-space models (will be replicated by MDFA)
library(dlm)
# Numerical package
library(numDeriv)
# Graphical package for recession-shading (empirical examples based on US-GDP)
library(tis)
#install.packages("devtools")
library(devtools)
# Load MDFA package from github
devtools::install_github("wiaidp/MDFA")
# MDFA package
library(MDFA)
library(RCurl)    # For getURL() and curl handler / cookie / google login
library(stringr)  # For str_trim() to trip whitespace from strings
library(Quandl)
require (Quandl)
#Quandl.api_key("ivVdJGV57TXA1RX5jgvp")
#  Tucker's libraries
library(expm)
library(R.utils)
library(xtable)
path.main <- paste(getwd(),"/Sweave/",sep="")
path.pgm <- paste(path.main,"Rnw/",sep="")
path.out <- paste(path.main,"Latex/",sep="")
## Load MDFA R codes #
sourceDirectory(path=paste(path.main,"RcodeTSM/",sep=""), modifiedOnly=FALSE)
script <- paste(path.pgm,"MDFA_Legacy",sep="")
## enforce par(ask=FALSE)
options(device.ask.default=FALSE)
## create a LaTeX file
Sweave(script,output=paste(path.out,"MDFA_Legacy.tex",sep=""))
rm(list=ls())
library(xts)
# State-space models (will be replicated by MDFA)
library(dlm)
# Numerical package
library(numDeriv)
# Graphical package for recession-shading (empirical examples based on US-GDP)
library(tis)
#install.packages("devtools")
library(devtools)
# Load MDFA package from github
devtools::install_github("wiaidp/MDFA")
# MDFA package
library(MDFA)
library(RCurl)    # For getURL() and curl handler / cookie / google login
library(stringr)  # For str_trim() to trip whitespace from strings
library(Quandl)
require (Quandl)
#Quandl.api_key("ivVdJGV57TXA1RX5jgvp")
#  Tucker's libraries
library(expm)
library(R.utils)
library(xtable)
path.main <- paste(getwd(),"/Sweave/",sep="")
path.pgm <- paste(path.main,"Rnw/",sep="")
path.out <- paste(path.main,"Latex/",sep="")
## Load MDFA R codes #
sourceDirectory(path=paste(path.main,"RcodeTSM/",sep=""), modifiedOnly=FALSE)
script <- paste(path.pgm,"MDFA_Legacy",sep="")
## enforce par(ask=FALSE)
options(device.ask.default=FALSE)
## create a LaTeX file
Sweave(script,output=paste(path.out,"MDFA_Legacy.tex",sep=""))
mdfa.r
mdfa.unconstrained
mdfa.filter
rm(list=ls())
library(xts)
# State-space models (will be replicated by MDFA)
library(dlm)
# Numerical package
library(numDeriv)
# Graphical package for recession-shading (empirical examples based on US-GDP)
library(tis)
#install.packages("devtools")
library(devtools)
# Load MDFA package from github
devtools::install_github("wiaidp/MDFA")
# MDFA package
library(MDFA)
library(RCurl)    # For getURL() and curl handler / cookie / google login
library(stringr)  # For str_trim() to trip whitespace from strings
library(Quandl)
require (Quandl)
#Quandl.api_key("ivVdJGV57TXA1RX5jgvp")
#  Tucker's libraries
library(expm)
library(R.utils)
library(xtable)
path.main <- paste(getwd(),"/Sweave/",sep="")
path.pgm <- paste(path.main,"Rnw/",sep="")
path.out <- paste(path.main,"Latex/",sep="")
## Load MDFA R codes #
sourceDirectory(path=paste(path.main,"RcodeTSM/",sep=""), modifiedOnly=FALSE)
script <- paste(path.pgm,"MDFA_Legacy",sep="")
## enforce par(ask=FALSE)
options(device.ask.default=FALSE)
## create a LaTeX file
Sweave(script,output=paste(path.out,"MDFA_Legacy.tex",sep=""))
rm(list=ls())
library(xts)
# State-space models (will be replicated by MDFA)
library(dlm)
# Numerical package
library(numDeriv)
# Graphical package for recession-shading (empirical examples based on US-GDP)
library(tis)
#install.packages("devtools")
library(devtools)
# Load MDFA package from github
devtools::install_github("wiaidp/MDFA")
# MDFA package
library(MDFA)
library(RCurl)    # For getURL() and curl handler / cookie / google login
library(stringr)  # For str_trim() to trip whitespace from strings
library(Quandl)
require (Quandl)
#Quandl.api_key("ivVdJGV57TXA1RX5jgvp")
#  Tucker's libraries
library(expm)
library(R.utils)
library(xtable)
path.main <- paste(getwd(),"/Sweave/",sep="")
path.pgm <- paste(path.main,"Rnw/",sep="")
path.out <- paste(path.main,"Latex/",sep="")
## Load MDFA R codes #
sourceDirectory(path=paste(path.main,"RcodeTSM/",sep=""), modifiedOnly=FALSE)
script <- paste(path.pgm,"MDFA_Legacy",sep="")
## enforce par(ask=FALSE)
options(device.ask.default=FALSE)
## create a LaTeX file
Sweave(script,output=paste(path.out,"MDFA_Legacy.tex",sep=""))
