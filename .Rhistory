knitr::opts_chunk$set(echo = TRUE)
T <- 1001
z <- rnorm(T)
T <- 1001
z <- rnorm(T)
x <- z[-T]*z[-1]
plot.ts(x)
acf(x)
rm(list=ls())
library(xts)
# State-space models (will be replicated by MDFA)
library(dlm)
# Numerical package
library(numDeriv)
# Graphical package for recession-shading (empirical examples based on US-GDP)
library(tis)
#install.packages("devtools")
library(devtools)
# Load MDFA package from github
devtools::install_github("wiaidp/MDFA")
# MDFA package
library(MDFA)
library(RCurl)    # For getURL() and curl handler / cookie / google login
library(stringr)  # For str_trim() to trip whitespace from strings
library(Quandl)
require (Quandl)
#Quandl.api_key("ivVdJGV57TXA1RX5jgvp")
#  Tucker's libraries
library(expm)
library(R.utils)
library(xtable)
path.main <- paste(getwd(),"/Sweave/",sep="")
path.pgm <- paste(path.main,"Rnw/",sep="")
path.out <- paste(path.main,"Latex/",sep="")
## Load MDFA R codes #
sourceDirectory(path=paste(path.main,"RcodeTSM/",sep=""), modifiedOnly=FALSE)
path.main
getwd()
setwd("C:\\Users\\neide\\Documents\\GitHub\\MDFA-Legacy")
path.main <- paste(getwd(),"/Sweave/",sep="")
path.pgm <- paste(path.main,"Rnw/",sep="")
path.out <- paste(path.main,"Latex/",sep="")
## Load MDFA R codes #
sourceDirectory(path=paste(path.main,"RcodeTSM/",sep=""), modifiedOnly=FALSE)
script <- paste(path.pgm,"MDFA_Legacy",sep="")
## enforce par(ask=FALSE)
options(device.ask.default=FALSE)
# Simulate a Gaussian VAR(1) of sample size 2500:
T <- 2500
N <- 2
phi.matrix <- rbind(c(1,.5),c(-.2,.3))
innovar.matrix <- diag(N)
true.psi <- var.par2pre(array(phi.matrix,c(2,2,1)))
gamma <- VARMAauto(array(phi.matrix,c(2,2,1)),NULL,innovar.matrix,10)
gamma.0 <- gamma[,,1]
x.init <- t(chol(gamma.0)) %*% rnorm(N)
x.next <- x.init
x.sim <- NULL
for(t in 1:T)
{
x.next <- phi.matrix %*% x.next + rnorm(N)
x.sim <- cbind(x.sim,x.next)
}
x.sim <- ts(t(x.sim))
x.acf <- acf(x.sim,type="covariance",plot=FALSE,lag.max=T)[[1]]
x.acf <- aperm(aperm(x.acf,c(3,2,1)),c(2,1,3))
# construct and apply low pass filter
mu <- pi/6
len <- 1000
lp.filter <- c(mu/pi,sin(seq(1,len)*mu)/(pi*seq(1,len)))
lp.filter <- c(rev(lp.filter),lp.filter[-1])
x.trend.ideal <- mvar.filter(x.sim,lp.filter)
load("C:/Users/neide/OneDrive/Documents/Research/MDFA/VAR1simWork.RData")
ls()
load("C:/Users/neide/OneDrive/Documents/Research/MDFA/PCEWork_3-21-18.RData")
ls()
load("C:/Users/neide/OneDrive/Documents/Research/MDFA/PetrolBiRegRelated_10-20-17.RData")
ls()
# Simulate a Gaussian VAR(1)
T.sim <- 500 + 2*len
N <- 2
phi.matrix <- rbind(c(1,.5),c(-.2,.3))
innovar.matrix <- diag(N)
